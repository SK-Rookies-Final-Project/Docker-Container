version: '3.8'

services:
  # === Kafka Controllers (KRaft Mode) ===
  controller1:
    hostname: controller1
    container_name: controller1
    image: confluentinc/cp-server:7.7.1
    ports:
      - "29095:9093"
    environment:
      KAFKA_NODE_ID: 101
      KAFKA_PROCESS_ROLES: 'controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '101@controller1:9093,102@controller2:9093,103@controller3:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'CONTROLLER://controller1:9093'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: 'http://schema-registry1:8081,http://schema-registry2:8081'
    networks:
      - kafka-network
    restart: unless-stopped

  controller2:
    hostname: controller2
    container_name: controller2
    image: confluentinc/cp-server:7.7.1
    ports:
      - "29096:9093"
    environment:
      KAFKA_NODE_ID: 102
      KAFKA_PROCESS_ROLES: 'controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '101@controller1:9093,102@controller2:9093,103@controller3:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'CONTROLLER://controller2:9093'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: 'http://schema-registry1:8081,http://schema-registry2:8081'
    networks:
      - kafka-network
    restart: unless-stopped

  controller3:
    hostname: controller3
    container_name: controller3
    image: confluentinc/cp-server:7.7.1
    ports:
      - "29097:9093"
    environment:
      KAFKA_NODE_ID: 103
      KAFKA_PROCESS_ROLES: 'controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '101@controller1:9093,102@controller2:9093,103@controller3:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENERS: 'CONTROLLER://controller3:9093'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: 'http://schema-registry1:8081,http://schema-registry2:8081'
    networks:
      - kafka-network
    restart: unless-stopped

  # === Kafka Brokers ===
  broker1:
    hostname: broker1
    container_name: broker1
    image: confluentinc/cp-server:7.7.1
    ports:
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:29092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://ec2-3-35-199-84.ap-northeast-2.compute.amazonaws.com:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '101@controller1:9093,102@controller2:9093,103@controller3:9093'
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
    depends_on:
      - controller1
      - controller2
      - controller3
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 3

  broker2:
    hostname: broker2
    container_name: broker2
    image: confluentinc/cp-server:7.7.1
    ports:
      - "39092:39092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:39092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://ec2-3-35-199-84.ap-northeast-2.compute.amazonaws.com:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '101@controller1:9093,102@controller2:9093,103@controller3:9093'
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
    depends_on:
      - controller1
      - controller2
      - controller3
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:39092"]
      interval: 30s
      timeout: 10s
      retries: 3

  broker3:
    hostname: broker3
    container_name: broker3
    image: confluentinc/cp-server:7.7.1
    ports:
      - "49092:49092"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:49092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://ec2-3-35-199-84.ap-northeast-2.compute.amazonaws.com:49092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '101@controller1:9093,102@controller2:9093,103@controller3:9093'
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
    depends_on:
      - controller1
      - controller2
      - controller3
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:49092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Schema Registry ===
  schema-registry1:
    image: confluentinc/cp-schema-registry:7.7.1
    hostname: schema-registry1
    container_name: schema-registry1
    ports:
      - "18081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry1
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      SCHEMA_REGISTRY_DEBUG: true
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: '_schemas'
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  schema-registry2:
    image: confluentinc/cp-schema-registry:7.7.1
    hostname: schema-registry2
    container_name: schema-registry2
    ports:
      - "18082:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry2
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      SCHEMA_REGISTRY_DEBUG: true
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: '_schemas'
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Kafka Connect Workers ===
  kafka-connect1:
    image: confluentinc/cp-kafka-connect:7.7.1
    hostname: kafka-connect1
    container_name: kafka-connect1
    ports:
      - "18083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect1
      CONNECT_REST_ADVERTISED_LISTENER: 'http'
      CONNECT_REST_ADVERTISED_PORT: 8083
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: connect-cluster-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: connect-cluster-offsets
      CONNECT_OFFSET_STORAGE_PARTITIONS: 25
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: connect-cluster-status
      CONNECT_STATUS_STORAGE_PARTITIONS: 5
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_CONFLUENT_LICENSE_TOPIC: '_confluent-command'
      CONNECT_MONITORING_INTERCEPTOR_TOPIC: '_confluent-monitoring'
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry1:8081,http://schema-registry2:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry1:8081,http://schema-registry2:8081
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.7.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      schema-registry1:
        condition: service_healthy
      schema-registry2:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-connect2:
    image: confluentinc/cp-kafka-connect:7.7.1
    hostname: kafka-connect2
    container_name: kafka-connect2
    ports:
      - "18084:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect2
      CONNECT_REST_ADVERTISED_LISTENER: 'http'
      CONNECT_REST_ADVERTISED_PORT: 8083
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: connect-cluster-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: connect-cluster-offsets
      CONNECT_OFFSET_STORAGE_PARTITIONS: 25
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: connect-cluster-status
      CONNECT_STATUS_STORAGE_PARTITIONS: 5
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_CONFLUENT_LICENSE_TOPIC: '_confluent-command'
      CONNECT_MONITORING_INTERCEPTOR_TOPIC: '_confluent-monitoring'
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry1:8081,http://schema-registry2:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry1:8081,http://schema-registry2:8081
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.7.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      schema-registry1:
        condition: service_healthy
      schema-registry2:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === KSQLDB ===
  ksqldb:
    image: confluentinc/cp-ksqldb-server:7.7.1
    hostname: ksqldb
    container_name: ksqldb
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_ADVERTISED_LISTENER: "http://ec2-3-35-199-84.ap-northeast-2.compute.amazonaws.com:8088"
      KSQL_BOOTSTRAP_SERVERS: "broker1:29092,broker2:39092,broker3:49092"
      KSQL_SERVICE_ID: "ksql-cluster1"
      CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: "broker1:29092,broker2:39092,broker3:49092"
      CONFLUENT_MONITORING_INTERCEPTOR_TOPIC: "_confluent-monitoring"
      KSQL_INTERNAL_TOPIC_REPLICAS: "3"
      KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry1:8081,http://schema-registry2:8081"
      KSQL_STREAMS_REPLICATION_FACTOR: "3"
      KSQL_STREAMS_STATE_DIR: "/data/ksql"
      KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_LOGGING_PROCESSING_TOPIC_PARTITIONS: "2"
      KSQL_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      schema-registry1:
        condition: service_healthy
      schema-registry2:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/info || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.7.1
    container_name: ksqldb-cli
    depends_on:
      ksqldb:
        condition: service_healthy
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafka-network

  # === Control Center ===
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.7.1
    hostname: control-center
    container_name: control-center
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:39092,broker3:49092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'kafka-connect1:8083,kafka-connect2:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry1:8081,http://schema-registry2:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 3
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 12
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATIONS: 3
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 3
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 3
      CONFLUENT_METRICS_TOPIC: '_confluent-metrics'
      CONFLUENT_METRICS_TOPIC_PARTITIONS: 12
      CONFLUENT_METRICS_TOPIC_REPLICATION: 3
      CONTROL_CENTER_UI_AUTOUPDATE_ENABLE: false
      CONTROL_CENTER_UI_CONTROLLER_CHART_ENABLE: true
      CONTROL_CENTER_USAGE_DATA_COLLECTION_ENABLE: false
      CONTROL_CENTER_COMMAND_TOPIC: '_confluent-command'
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 3
    depends_on:
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      broker3:
        condition: service_healthy
      schema-registry1:
        condition: service_healthy
      schema-registry2:
        condition: service_healthy
      kafka-connect1:
        condition: service_healthy
      kafka-connect2:
        condition: service_healthy
      ksqldb:
        condition: service_healthy
    networks:
      - kafka-network
    restart: unless-stopped

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka-data:
    driver: local